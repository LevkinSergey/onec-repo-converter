///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль управления приложением
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать json
#Использовать cli

///////////////////////////////////////////////////////////////////////////////

Перем Приложение;
Перем ИмяПараметраФайлаНастроек;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Выполняет инициализацию приложения
// Заполнение параметров и регистрацию команд
//
Функция ИнициализироватьПриложение() Экспорт

	Если Приложение <> Неопределено Тогда
		
		ВызватьИсключение "Приложение уже инициализировано";

	КонецЕсли;

	Приложение = Новый КонсольноеПриложение(
		ПараметрыПриложения.ИмяПродукта(), 
		ПараметрыПриложения.КраткоеОписаниеПродукта(), 
		Новый КомандаСправкаПоПриложению());

	Приложение.Версия("v version", ПараметрыПриложения.ВерсияПродукта());

	ЗарегистрироватьКомандыПриложения();

КонецФункции

// Выполняет запуск приложения
// И при необходимости инициализацию
//
// Параметры:
//   АргументыЗапуска - Массив - Аргументы командной строки
//
Процедура Запустить(АргументыЗапуска = Неопределено) Экспорт

	Если Приложение = Неопределено Тогда

		ИнициализироватьПриложение();

	КонецЕсли;

	Если АргументыЗапуска = Неопределено Тогда
		
		АргументыЗапуска = АргументыКоманднойСтроки;
		
	КонецЕсли;
	
	Аргументы = СоздатьМассивИзФиксированного(АргументыЗапуска);
	
	ИмяФайлаПараметров = НайтиИмяФайлаНастроек(Аргументы);

	Если ЗначениеЗаполнено(ИмяФайлаПараметров) Тогда
		
		ЗагрузитьПараметрыИзФайла(ИмяФайлаПараметров);

	КонецЕсли;

	Приложение.Запустить(Аргументы);

КонецПроцедуры

// ПолучитьЛог
//	Возвращает лог приложения
//
//  Возвращаемое значение:
//   Лог - Лог приложения
//
Функция ПолучитьЛог() Экспорт
	
	Возврат Логирование.ПолучитьЛог(ПараметрыПриложения.ИмяЛогаСистемы());
	
КонецФункции

// Метод возвращает экземпляр приложения
//
//  Возвращаемое значение:
//   КонсольноеПриложение - Экземпляр приложения
//
Функция Приложение() Экспорт

	Возврат Приложение;

КонецФункции

// Выполняет чтение параметров из файла и их установку
//
// Параметры:
//   ИмяФайлаНастроек - Строка - Имя файла настроек
//
Процедура ЗагрузитьПараметрыИзФайла(ИмяФайлаНастроек) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаНастроек) Тогда

		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаНастроек = ОбъединитьПути(ТекущийКаталог(), ИмяФайлаНастроек);

	Параметры   = ПрочитатьФайл(ИмяФайлаНастроек);

	Если Тип("Структура") <> ТипЗнч(Параметры) Тогда

		Возврат;
		
	КонецЕсли;

	ОсновнаяКоманда = Приложение.ПолучитьКоманду();
	КомандыПриложения = ОсновнаяКоманда.ПолучитьПодкоманды();

	Для Каждого Команда Из КомандыПриложения Цикл
		
		Синонимы = Команда.ПолучитьСинонимы();
		
		ПараметрыКоманды = Неопределено;

		Для Каждого Синоним Из Синонимы Цикл
			
			Если Параметры.Свойство(Синоним) Тогда
				
				ПараметрыКоманды = Параметры[Синоним];
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыКоманды = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Команда.НачалоЗапуска();

		Для Каждого Элемент Из ПараметрыКоманды Цикл
			
			ПараметрКоманды = Команда.АргументИзИндекса(Элемент.Ключ);
			
			Если ПараметрКоманды = Неопределено Тогда
				
				ПараметрКоманды = Команда.ОпцияИзИндекса(Элемент.Ключ);
				Если ПараметрКоманды = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрКоманды.Значение = Элемент.Значение;
			ПараметрКоманды.УстановленаПользователем = Истина;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Ищет в аргументах командной строки имя файла настроек
//
// Параметры:
//   Аргументы - Массив - Аргументы командной строки
//   УдалитьАргументФайла - Булево - Истина - параметр с файлом настроек будет удален из аргументов
//
//  Возвращаемое значение:
//   Строка, Неопределено - Имя файла или неопределено, если файл не найден
//
Функция НайтиИмяФайлаНастроек(Аргументы, УдалитьАргументФайла = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПараметраФайлаНастроек) Тогда
		
		ИмяПараметраФайлаНастроек = "--settings";
		
	КонецЕсли;
	
	Для Каждого Аргумент Из Аргументы Цикл
		
		Если СтрНачинаетсяС(Аргумент, ИмяПараметраФайлаНастроек) Тогда
			
			ИмяФайлаНастроек = Сред(Аргумент, СтрДлина(ИмяПараметраФайлаНастроек) + 2);
			
			Аргументы.Удалить(Аргументы.Найти(Аргумент));
			
			Возврат ИмяФайлаНастроек;

		КонецЕсли;

	КонецЦикла;
	
	Возврат ИмяФайлаНастроек;		

КонецФункции

// Устанавливает имя параметра файла настроек, которое будет использовано при поиске
//
// Параметры:
//   НовоеИмяПараметраФайлаНастроек - Строка - Новое имя параметра
//
Процедура УстановитьИмяПараметраФайлаНастроек(НовоеИмяПараметраФайлаНастроек) Экспорт
	
	ИмяПараметраФайлаНастроек = НовоеИмяПараметраФайлаНастроек;
	
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьФайл(ИмяФайла)
	
	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьФайл(ИмяФайла, КодировкаТекста.UTF8);
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();
	
	Возврат Данные;

КонецФункции

Функция СоздатьМассивИзФиксированного(ФиксированныйМассив)
	
	Результат = Новый Массив(ФиксированныйМассив.Количество());
	
	Для инд = 0 По ФиксированныйМассив.ВГраница() Цикл
		
		Результат[инд] = ФиксированныйМассив[инд];
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ЗарегистрироватьКомандыПриложения()

	// Пример регистрации команды
	// Приложение.ДобавитьКоманду("привет п hi", "Приветствие", Новый КомандаПривет());

КонецПроцедуры
