#Использовать gitrunner
#Использовать progbar

Процедура ОписаниеКоманды(КомандаПриложения) Экспорт
	
	КомандаПриложения.Опция("b branch", "master", "Ветка репозитория");
	КомандаПриложения.Опция("q squash", Ложь, "Объединить последовательные коммиты одного автора");
	КомандаПриложения.Опция("hash", "", "Стартовый коммит (полный hash), с которого будет начато конвертирование");
	КомандаПриложения.Опция("s source-only", Ложь, 
		"Переносить в новый репозиторий только исходный код, игнорируя иные файлы");
		
	КомандаПриложения.Опция("d source-dir", "src/configuration", "Каталог расположения исходного кода конфигурации");
	КомандаПриложения.Опция("p project", "configuration", "Имя проекта (каталог) в новом репозитории");

	// Имя аргумента должно быть в верхнем регистре
	КомандаПриложения.Аргумент("SOURCEREPODIR", "", "Каталог исходного репозитория")
		.Обязательный(Истина);
	
	КомандаПриложения.Аргумент("DESREPODIR", "", "Каталог в котором будет создан новый репозиторий")
		.Обязательный(Истина);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт
	
	КаталогИсходногоРепозитория = КомандаПриложения.ЗначениеАргумента("SOURCEREPODIR");
	КаталогНовогоРепозитория = КомандаПриложения.ЗначениеАргумента("DESREPODIR");
	
	ФайлКаталогИсходногоРепозитория = Новый Файл(КаталогИсходногоРепозитория);
	ИсходныйГитРепозиторий = Новый ГитРепозиторий();
	Если НЕ ФайлКаталогИсходногоРепозитория.Существует() ИЛИ ФайлКаталогИсходногоРепозитория.ЭтоФайл() Тогда
		ВызватьИсключение "Указан несуществующий каталог исходного репозитория: `" 
			+ ФайлКаталогИсходногоРепозитория.ПолноеИмя + "`";
	Иначе
		ИсходныйГитРепозиторий.УстановитьРабочийКаталог(ФайлКаталогИсходногоРепозитория.ПолноеИмя);
		Если НЕ ИсходныйГитРепозиторий.ЭтоРепозиторий() Тогда
			ВызватьИсключение "Указанный каталог исходного репозитория не явлется репозиторием git";
		КонецЕсли;
	КонецЕсли;
	
	Ветка = КомандаПриложения.ЗначениеОпции("branch");
	Если НЕ ЗначениеЗаполнено("Ветка") Тогда
		Ветка = "master";
	КонецЕсли;

	ИсходныйГитРепозиторий.ПерейтиВВетку(Ветка, Ложь, Истина);
	
	История = ПолучитьИсториюРепозитория(
					КаталогИсходногоРепозитория, 
					КомандаПриложения.ЗначениеОпции("hash"),
					КомандаПриложения.ЗначениеОпции("squash"));

	Если История.Количество() = 0 Тогда
		ВызватьИсключение "История изменений пуста";
	КонецЕсли;
	
	ФайлКаталогНовогоРепозитория = Новый Файл(КаталогНовогоРепозитория);
	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(ФайлКаталогНовогоРепозитория.ПолноеИмя);
	Если НЕ ФайлКаталогНовогоРепозитория.Существует() Тогда
		СоздатьКаталог(ФайлКаталогНовогоРепозитория.ПолноеИмя);
	КонецЕсли;

	ПараметрыГитДобавить = Новый Массив;
	ПараметрыГитДобавить.Добавить("add -A .");
	Если НЕ ГитРепозиторий.ЭтоРепозиторий() Тогда
		ГитРепозиторий.Инициализировать();
		Текст = Новый ТекстовыйДокумент();
		Текст.Записать(ОбъединитьПути(ФайлКаталогНовогоРепозитория.ПолноеИмя, ".initfile"));
		ГитРепозиторий.ВыполнитьКоманду(ПараметрыГитДобавить);
		ГитРепозиторий.Закоммитить("init", Истина, , , ПолучитьДатуНачалаИстории(История));	
	КонецЕсли;

	ГитРепозиторий.ПерейтиВВетку(Ветка, 
					ГитРепозиторий.ПолучитьСписокВеток().НайтиСтроки(Новый Структура("Имя", Ветка)) = Неопределено, 
					Истина);
	
	РабочийКаталогRING = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(РабочийКаталогRING);

	КаталогИсходныхФайловКонфигуации = ОбъединитьПути(ФайлКаталогИсходногоРепозитория.ПолноеИмя, 
											КомандаПриложения.ЗначениеОпции("source-dir"));
											
	КаталогПроектаEDT = ОбъединитьПути(ФайлКаталогНовогоРепозитория.ПолноеИмя, 
											КомандаПриложения.ЗначениеОпции("project"));

	ПереноситьТолькоФайлыКонфигурации = КомандаПриложения.ЗначениеОпции("source-only");
	ПрогрессБар = Новый ПрогрессБар();
	ПрогрессБар.Начать(История.Количество(), "Прогресс");
	
	Для Ит = 0 По История.Количество() - 1 Цикл
		КоммитИзИстории = История[Ит];
		ПрогрессБар.СделатьШаг(, , КоммитИзИстории.hash + " ");
		
		Если Не ЗначениеЗаполнено(КоммитИзИстории.author) Тогда
			Сообщить("Пропущен коммит " + КоммитИзИстории.hash);
			Продолжить;
		КонецЕсли;

		УдалитьФайлыИзКаталогаРепозитория(ФайлКаталогНовогоРепозитория.ПолноеИмя, КаталогПроектаEDT, ПереноситьТолькоФайлыКонфигурации);
		УдалитьФайлы(РабочийКаталогRING);
		СоздатьКаталог(РабочийКаталогRING);
		
		ПараметрыГит = Новый Массив;
		ПараметрыГит.Добавить("checkout -f --detach " + КоммитИзИстории.hash);
		ИсходныйГитРепозиторий.ВыполнитьКоманду(ПараметрыГит);
		Если НайтиФайлы(ОбъединитьПути(КаталогИсходныхФайловКонфигуации, "configuration.xml")).Количество() Тогда
			
			КомандныйФайл = Новый КомандныйФайл;
			КомандныйФайл.Создать();
			КомандныйФайл.ДобавитьКоманду("cd /d " + ФайлКаталогНовогоРепозитория.ПолноеИмя);
			КомандныйФайл.ДобавитьКоманду("ring edt workspace import --configuration-files """ 
				+ КаталогИсходныхФайловКонфигуации + """ --workspace-location """ + РабочийКаталогRING 
				+ """ --project """ + КаталогПроектаEDT + """");
				
			КомандныйФайл.УстановитьКодировкуВывода(КодировкаТекста.ANSI);
			КомандныйФайл.Исполнить();
			МенеджерПриложения.ПолучитьЛог().Отладка("Лог ring, %1", КомандныйФайл.ПолучитьВывод());
			
			ГитРепозиторий.ВыполнитьКоманду(ПараметрыГитДобавить);

		КонецЕсли;
		
		Если НЕ ПереноситьТолькоФайлыКонфигурации Тогда
			СкопироватьОстальныеФайлы(ФайлКаталогИсходногоРепозитория.ПолноеИмя, ФайлКаталогНовогоРепозитория.ПолноеИмя, КаталогПроектаEDT);
		КонецЕсли;

		Если НЕ СтрНайти(ГитРепозиторий.Статус(), "nothing to commit")  Тогда
				
			ГитРепозиторий.Закоммитить(СокрЛП(СтрЗаменить(КоммитИзИстории.body, "\n", Символы.ПС)), 
											Истина, , 
											КоммитИзИстории.author, 
											ПолучитьДатуИзСтроки(КоммитИзИстории.date), 
											КоммитИзИстории.author,
											ПолучитьДатуИзСтроки(КоммитИзИстории.commiterDate));
		КонецЕсли;

	КонецЦикла;
	
	ПрогрессБар.Завершить();
	Сообщить(ПрогрессБар.ДлительностьВыполнения(ИСТИНА));

КонецПроцедуры

Функция ПолучитьИсториюРепозитория(КаталогРепозитория, СтартовыйКоммит, ОбъединятьКоммитыОдногоАвтора) 

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.УстановитьПриложение("C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe");
	КомандныйФайл.Создать();
	КомандныйФайл.ДобавитьКоманду("cd /d " + КаталогРепозитория);
	КомандныйФайл.ДобавитьКоманду("echo [{#/dquotes/hash#/dquotes/:#/dquotes/#/dquotes/} > " + ИмяВременногоФайла);
	КомандныйФайл.ДобавитьКоманду("git log --pretty=""format:," 
		+ "{#/dquotes/hash#/dquotes/: #/dquotes/%%H#/dquotes/, #/dquotes/author#/dquotes/: "
		+ "#/dquotes/%%an <%%ae>#/dquotes/, #/dquotes/date#/dquotes/: #/dquotes/%%ai#/dquotes/, " 
		+ "#/dquotes/commiter#/dquotes/:#/dquotes/%%cn <%%ce>#/dquotes/, #/dquotes/commiterDate#/dquotes/: " 
		+ "#/dquotes/%%ci#/dquotes/, #/dquotes/body#/dquotes/: #/dquotes/%%s\n%%b#/dquotes/}"" " 
		+ "|  sed ':a;N;$!ba;s/\n\,/\,/g' >>" + ИмяВременногоФайла);
		
	КомандныйФайл.ДобавитьКоманду("echo ,{#/dquotes/hash#/dquotes/:#/dquotes/#/dquotes/}] >> " + ИмяВременногоФайла);
	
	КомандныйФайл.Исполнить();
	
	МенеджерПриложения.ПолучитьЛог().Отладка("Имя временного файла, %1", ИмяВременногоФайла);

	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ТекстФайла = Текст.ПолучитьТекст();
	
	РегулярноеВыражение = Новый РегулярноеВыражение("(.)(\\)([^nt])");
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;
	РегулярноеВыражение.Многострочный = Истина;
	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстФайла);
	Для Каждого Совпадение Из Совпадения Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, Совпадение.Группы[0].Значение, Совпадение.Группы[1].Значение + "\\" + Совпадение.Группы[3].Значение);
	КонецЦикла;

	РегулярноеВыражение = Новый РегулярноеВыражение("([^\\])(\\\\\\)([^nt])");
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;
	РегулярноеВыражение.Многострочный = Истина;
	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстФайла);
	Для Каждого Совпадение Из Совпадения Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, Совпадение.Группы[0].Значение, Совпадение.Группы[1].Значение + "\\\\" + Совпадение.Группы[3].Значение);
	КонецЦикла;
	
	ТекстФайла = СтрЗаменить(ТекстФайла, """", "\""");
	ТекстФайла = СтрЗаменить(ТекстФайла, "#/dquotes/", """");
	ТекстФайла = СтрЗаменить(ТекстФайла, Символы.ПС, "\n");
	ТекстФайла = СтрЗаменить(ТекстФайла, "} \n,{", "},{");
	ТекстФайла = СтрЗаменить(ТекстФайла, "] \n", "]");
	ТекстФайла = СтрЗаменить(ТекстФайла, Символы.Таб, "\t");
		
	Текст.УстановитьТекст(ТекстФайла);
	Текст.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	Коммиты = ПрочитатьJSON(ЧтениеJSON, Истина);

	КоличествоКоммитов = Коммиты.Количество() - 1;
	
	ИсторияКоммитов = Новый ТаблицаЗначений;
	ИсторияКоммитов.Колонки.Добавить("author");
	ИсторияКоммитов.Колонки.Добавить("hash");
	ИсторияКоммитов.Колонки.Добавить("body");
	ИсторияКоммитов.Колонки.Добавить("date");
	ИсторияКоммитов.Колонки.Добавить("commiterDate");
	
	ПоследнийАвтор = "";
	ОбщийКомментарий = "";
	ПоследнийХэш = "";
	ПоследняяДатаКоммита = "";
	ПоследняяДатаКоммиттера = "";
	СтартовыйКоммитНайден = ЛОЖЬ;
	Для Ит = 0 По КоличествоКоммитов Цикл
		ТекКоммит = Коммиты[КоличествоКоммитов - Ит];
		
		Если Не ЗначениеЗаполнено(ТекКоммит.Получить("author")) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ СтартовыйКоммитНайден 
				И ЗначениеЗаполнено(СтартовыйКоммит) 
				И СтартовыйКоммит <> ТекКоммит.Получить("hash") Тогда
			Продолжить;
		КонецЕсли;
		
		СтартовыйКоммитНайден = Истина;
		
		Если ПоследнийАвтор = "" Тогда
			
			ПоследнийАвтор = ТекКоммит.Получить("author");
			ПоследнийХэш = ТекКоммит.Получить("hash");
			ОбщийКомментарий = ТекКоммит.Получить("body");
			ПоследняяДатаКоммита = ТекКоммит.Получить("date");
			ПоследняяДатаКоммиттера = ТекКоммит.Получить("commiterDate");
			Продолжить;
			
		КонецЕсли;

		Если НЕ ОбъединятьКоммитыОдногоАвтора ИЛИ ТекКоммит.Получить("author") <> ПоследнийАвтор Тогда
			
			СтрокаКоммитов = ИсторияКоммитов.Добавить();
			СтрокаКоммитов.author = ПоследнийАвтор;
			СтрокаКоммитов.hash = ПоследнийХэш;
			СтрокаКоммитов.body = СокрЛП(ОбщийКомментарий);
			СтрокаКоммитов.date = ПоследняяДатаКоммита;
			СтрокаКоммитов.commiterDate = ПоследняяДатаКоммиттера;
			
			ОбщийКомментарий = "";
			ПоследнийАвтор = ТекКоммит.Получить("author");
			ПоследняяДатаКоммита = ТекКоммит.Получить("date");
			ПоследняяДатаКоммиттера = ТекКоммит.Получить("commiterDate");
			
		КонецЕсли;
		
		ОбщийКомментарий = ОбщийКомментарий + Символы.ПС + ТекКоммит.Получить("body");
		ПоследнийХэш = ТекКоммит.Получить("hash");
		
	КонецЦикла;	

	СтрокаКоммитов = ИсторияКоммитов.Добавить();
	СтрокаКоммитов.author = ПоследнийАвтор;
	СтрокаКоммитов.hash = ПоследнийХэш;
	СтрокаКоммитов.body = СокрЛП(ОбщийКомментарий);
	СтрокаКоммитов.date = ПоследняяДатаКоммита;
	СтрокаКоммитов.commiterDate = ПоследняяДатаКоммиттера;
	
	Возврат ИсторияКоммитов;
	
КонецФункции

Функция ПолучитьДатуНачалаИстории(История)
	ДатаПервогоКоммитаСтрокой = История[0].date;
	Возврат ПолучитьДатуИзСтроки(ДатаПервогоКоммитаСтрокой) - 1;
КонецФункции

Функция ПолучитьДатуИзСтроки(СтроковаяДата)
	Возврат Дата(Лев(СтроковаяДата, 4) 
	+ Сред(СтроковаяДата, 6, 2) 
	+ Сред(СтроковаяДата, 9, 2) 
	+ Сред(СтроковаяДата, 12, 2) 
	+ Сред(СтроковаяДата, 15, 2) 
	+ Сред(СтроковаяДата, 18, 2));	
КонецФункции

Процедура УдалитьФайлыИзКаталогаРепозитория(КаталогРепозитория, КаталогПроекта, ПереноситьТолькоФайлыКонфигурации)
	Если ПереноситьТолькоФайлыКонфигурации Тогда
		УдалитьФайлы(КаталогПроекта);
	Иначе
		Файлы = НайтиФайлы(КаталогРепозитория, "*");
		Для Каждого Файл Из Файлы Цикл
			Если Файл.Имя = ".git" Тогда
				Продолжить;
			Иначе
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьОстальныеФайлы(КаталогИсходногоРепозитория, КаталогоНовогоРепозитория, КаталогПроекта)
	КаталогGit = ОбъединитьПути(КаталогИсходногоРепозитория, ".git");
	Файлы = НайтиФайлы(КаталогИсходногоРепозитория, "*", Истина);
	
	Для Каждого Файл Из Файлы Цикл
		Если СтрНачинаетсяС(Файл.ПолноеИмя, КаталогПроекта)
				ИЛИ СтрНачинаетсяС(Файл.ПолноеИмя, КаталогGit) Тогда
			Продолжить;
		КонецЕсли;
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(СтрЗаменить(Файл.ПолноеИмя, КаталогИсходногоРепозитория, КаталогоНовогоРепозитория));
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, СтрЗаменить(Файл.ПолноеИмя, КаталогИсходногоРепозитория, КаталогоНовогоРепозитория));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
